import os
import pandas as pd
import win32com.client
from typing import List, Optional, Dict, Union
from io import BytesIO
from datetime import datetime
from utils import log_message  # Import the utility function

def load_email_recipients(csv_path: str) -> Dict[str, str]:
    """
    Load email recipients from CSV file.
    
    Args:
        csv_path: Path to CSV file with Region and Email columns
        
    Returns:
        Dictionary mapping region names to email addresses
    """
    try:
        print(f"Loading email recipients from {csv_path}")
        emails_df = pd.read_csv(csv_path)
        # Convert to dictionary mapping each region to a list of emails
        email_dict = emails_df.groupby('Region')['Email'].apply(list).to_dict()
        return email_dict
    except Exception as e:
        print(f"Error loading email recipients: {e}")
        return {}

def email_reports(
        region_reports: List[Union[str, BytesIO]],
        regions: List[str],
        report_in_memory: bool = False,
        email_csv: str = "emails.csv",
        verbosity: int = 1,
        regions_with_alerts: List[str] = None
) -> bool:
    """
    Email reports to recipients using MS Outlook.
    
    Args:
        region_reports: List of file paths or BytesIO objects containing report PDFs
        regions: List of region names corresponding to the reports
        report_in_memory: If True, region_reports contains BytesIO objects, otherwise file paths
        email_csv: Path to CSV file containing email recipients
        verbosity: Verbosity level (0=silent, 1=info, 2=debug)
        regions_with_alerts: List of region names that have alerts (to determine email content)
        
    Returns:
        Success status
    """
    # Load email recipients
    try:
        emails_df = pd.read_csv(email_csv)
    except FileNotFoundError:
        log_message("Error: emails.csv not found. Cannot send emails.", 1, verbosity)
        return False
    except Exception as e:
        log_message(f"Error reading emails.csv: {e}", 1, verbosity)
        return False
    
    recipients = load_email_recipients(email_csv)
    
    if not recipients:
        log_message("No email recipients found. Check the emails.csv file.", 1, verbosity)
        return False
      # Get today's date for the email subject
    today = datetime.today().strftime("%B %d, %Y")
    
    try:
        # Create Outlook application object
        outlook = win32com.client.Dispatch("Outlook.Application")
        
        # Track success
        all_success = True
        
        # First, handle regions that have reports (regions with alerts)
        for i, region in enumerate(regions):
            if region not in recipients:
                log_message(f"No email recipient found for {region}. Skipping.", 1, verbosity)
                all_success = False
                continue
                
            # Check if this region has alerts
            has_alerts = regions_with_alerts is None or region in regions_with_alerts
            
            # Create a new email
            mail = outlook.CreateItem(0)  # 0 corresponds to olMailItem
            
            mail.Subject = f"ATSPM Report - {region} - {today}"
            
            # Join all email addresses for the region into a single TO field
            mail.To = ';'.join(recipients[region])
            
            # Set email body based on whether there are alerts
            if has_alerts:
                # Email body for regions with alerts
                mail.HTMLBody = f"""
                <p>Hello,</p>
                <p>Attached is the Automated Traffic Signal Performance Measures report for {region} dated {today}.</p>
                <p>Please review the findings and address any issues identified in the report.</p>
                <p><br><i>Note: This is an automated email generated by the open source ATSPM Report, source code available on <a href="https://github.com/ShawnStrasser/atspm-report">GitHub</a>.</i></p>
                <p>Please review the list of recipients for your region and reply to this email to add or remove anyone. Thanks!</p>
                """
            else:
                # Email body for regions with no alerts
                mail.HTMLBody = f"""
                <p>Hello,</p>
                <p>Good news! The Automated Traffic Signal Performance Measures analysis for {region} dated {today} found no new issues to report.</p>
                <p>All traffic signals in your region are operating within normal parameters. No action is required at this time.</p>
                <p><br><i>Note: This is an automated email generated by the open source ATSPM Report, source code available on <a href="https://github.com/ShawnStrasser/atspm-report">GitHub</a>.</i></p>
                <p>Please review the list of recipients for your region and reply to this email to add or remove anyone. Thanks!</p>
                """            
            # Attachment handling depends on whether report is in memory or on disk and whether there are alerts
            if has_alerts:
                # Only attach reports for regions with alerts
                if report_in_memory:
                    # Reports are in memory as BytesIO objects
                    buffer = region_reports[i]
                    buffer.seek(0)  # Ensure we're at the beginning of the buffer
                    
                    # Create a temporary file to attach
                    temp_path = f"ATSPM_report_{region.replace(' ', '_')}.pdf"
                    with open(temp_path, 'wb') as f:
                        f.write(buffer.getvalue())
                    
                    # Add the attachment
                    mail.Attachments.Add(os.path.abspath(temp_path))
                    
                    # Send the email
                    mail.Send()
                    
                    # Clean up temporary file
                    try:
                        os.remove(temp_path)
                    except Exception as e:
                        log_message(f"Warning: Could not remove temporary file {temp_path}: {e}", 1, verbosity)
                else:
                    # Reports are on disk
                    report_path = region_reports[i]
                    
                    # Add the attachment if file exists
                    if os.path.exists(report_path):
                        mail.Attachments.Add(os.path.abspath(report_path))
                        mail.Send()
                    else:
                        log_message(f"Error: Report file not found at {report_path}", 1, verbosity)
                        all_success = False
            else:
                # For regions with no alerts, just send the email without attachment
                mail.Send()
            
            if has_alerts:
                log_message(f"Report for {region} sent to {recipients[region]}", 1, verbosity)
            else:
                log_message(f"No-alerts notification for {region} sent to {recipients[region]}", 1, verbosity)
        
        # Now handle any regions that have email recipients but no reports
        if regions_with_alerts is not None:
            all_recipient_regions = set(recipients.keys())
            regions_with_reports = set(regions)
            
            regions_without_reports = all_recipient_regions - regions_with_reports
            
            for region in regions_without_reports:
                # Skip "All Regions" as it's handled separately
                if region == "All Regions":
                    continue
                
                log_message(f"Sending no-alerts notification for {region} (no report generated)", 1, verbosity)
                
                continue # disable cause these are probably kinda annoying
                # Create a new email
                mail = outlook.CreateItem(0)  # 0 corresponds to olMailItem
                mail.Subject = f"ATSPM Report - {region} - {today} - No Issues Found"
                mail.To = ';'.join(recipients[region])
                
                # Email body for regions with no alerts
                mail.HTMLBody = f"""
                <p>Good news, ATSPM Report for {region} {today} found no new issues!</p>
          
                <p><br><br><i>Note: This is an automated email generated by the open source ATSPM Report, source code available on <a href="https://github.com/ShawnStrasser/atspm-report">GitHub</a>.</i></p>
                <p>Please review the list of recipients for your region and reply to this email to add or remove anyone. Thanks!</p>
                """
                
                # Send the email without attachment
                mail.Send()
                
                log_message(f"No-alerts notification for {region} sent to {recipients[region]}", 1, verbosity)
            
        return all_success
    
    except Exception as e:
        log_message(f"Error sending emails: {e}", 1, verbosity)
        return False